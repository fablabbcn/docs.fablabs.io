{
    "docs": [
        {
            "location": "/",
            "text": "Fablabs.io Developer Guide\n\n\nGetting started\n\n\nRegistering your application\n\n\nIn order to be able to use the Fablabs.io API you must first register your application in the [Fablabs.io Developer Console].\n\n\nOnce logged-in on Fablabs.io, you can access the Console, by clicking your username on the upper right of the screen, and selecting \nDeveloper Console\n from the dropdown.\n\n\nOAuth Authentication\n\n\nThe API uses \nOAuth2\n for authentication and authorization.\n\n\nThe typical workflow is the following:\n\n\n\n\n\n\nYou register an Application in your fablabs.io account, the system will create for you an Application Identifier and a shared Secret.\n\n\n\n\n\n\nYour application redirects the user to obtain an Authorization Code from the API, passing the Application Identifier, a callback URL, and optionally an unique identifier which represents the user in your app. The shared secret is used for signing the request, so the API knows that it's really your app.\n\n\n\n\n\n\nOnce authenticated, the user is redirected to the callback URL specified before, passing a \ncode\n parameter containing the Authorization Code.\n\n\n\n\n\n\nUsing the Authorization Code your app can request an Access Token from the API, which allows to call it on behalf of the logged in user\n\n\n\n\n\n\nFinally you specify the Access Token in your API Requests via the query \naccess_token\n param or the \nAuthorization\n HTTP Header, using the \nBearer <token>\n syntax\n\n\n\n\n\n\n     +----------+\n     | resource |\n     |   owner  |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier      +---------------+\n     |         -+----(A)-- & Redirection URI ---->|               |\n     |  User-   |                                 | Authorization |\n     |  Agent  -+----(B)-- User authenticates --->|     Server    |\n     |          |                                 |               |\n     |         -+----(C)-- Authorization Code ---<|               |\n     +-|----|---+                                 +---------------+\n       |    |                                         ^      v\n      (A)  (C)                                        |      |\n       |    |                                         |      |\n       ^    v                                         |      |\n     +---------+                                      |      |\n     |         |>---(D)-- Authorization Code ---------'      |\n     |  Client |          & Redirection URI                  |\n     |         |                                             |\n     |         |<---(E)----- Access Token -------------------'\n     +---------+       (w/ Optional Refresh Token)\n\n\n     OAuth Authorization Code Flow (source draft-ietf-oauth-v2-22)\n\n\n\n\nThere are a few client libraries for most programming languages that simplify the OAuth process, please see\nthe \nOAuth client and server implementations\n list.\n\n\nAPI Reference\n\n\nCheck the \nAPI reference\n, based on swagger definition, to try out the API\nfrom your browser.\n\n\n\n\nThe documentation uses the \nJSON API standard\n, which defines a number of conventions\nconcerning status codes, response format, pagination and so on. Many software libraries allow to interact with\nthe JSON-API compliant APIs  in a seamless way. The following page contains a \nlist of all JSON-API clients\n.\n\n\n\n\nContributing\n\n\nThe Fablabs.io platform is open for contributions from the community.\n\n\nYou can contribute in several ways:\n\n\n\n\n\n\nOpening issues about bugs and feature requests\n\n\n\n\n\n\nContributing fixes for issues and new features, by submitting pull requests\n\n\n\n\n\n\nExtending and enhancing this documentation\n\n\n\n\n\n\nIssue tracker\n\n\nThe Fablabs.io issue tracker is the right place to flag issues and to propose new features. \n\n\nWhen reporting a bug make sure you follow these basic guidelines, including the following information:\n\n\n\n\nTitle: Using a clear title for the issue makes it easier to find it\n\n\nEnvironment: your OS, browser version and any other information that might be useful\n\n\nSteps to reproduce\n\n\nExpected Result\n\n\nActual Result\n\n\nVisual Proof (screenshots, videos, text)\n\n\n\n\nPull requests\n\n\nPull requests are welcome, all the pull requests are tested using \nTravis-CI\n.\n\n\nTo send a pull request, you need to Fork the project, add some changes and use the Github interface to start the process:\n\n\n\n\nOn GitHub, navigate to the main page of the  (forked) repository.\n\n\nIn the \"Branch\" menu, choose the branch that contains your commits.\n\n\nTo the right of the Branch menu, click New pull request.\n\n\n\n\nAlways make sure the test suite is passing locally before sending a pull request.\n\n\nImprove the documentation\n\n\nThis documentation is open-source as well, so you can send pull requests for enhancing it or fixing any error.\n\n\nSimilar to the above, fork the \nGithub docs.fablabs.io\n repository and follow the instructions in the \nREADME\n on how to build the documentation.\n\n\nSetting up the development environment\n\n\nIn order to be able to edit the code and contribute, you first need to setup your development environment replicating the production version of Fablabs.io.\n\n\nThis will allow to run tests and develop new features with ease.\n\n\nThe development environment is now fully ported to docker, which is the recommended way, taking only few minutes.\n\n\nUsing Docker & Docker-composer\n\n\nYou will need the latest version of \nDocker\n and \nDocker compose\n installed on your machine. Docker runs on most modern OSes.\n\n\n\n\nStep one\n\n\n\n\nClone the official repository\n\n\ngit clone https://github.com/fablabbcn/fablabs.io.git\n\n\n\n\nStart the project:  \n\n\ndocker-compose up web app\n\n\n\n\nCreate database (only the first time):  \n\n\n docker-compose exec app rake db:setup\n docker-compose exec app /usr/local/bin/bower install\n\n\n\n\nAdd the following lines to your \n/etc/hosts\n:\n\n\n127.0.0.1   www.fablabs.local\n127.0.0.1   api.fablabs.local\n\n\n\n\nYou can also add some seed data, instead of starting with an empty db:\n\n\ndocker-compose exec app rake db:seed\n\n\n\n\nRun tests with\n\n\ndocker-compose exec app rake spec\n\n\n\n\nThe code is mounted from the local filesystem, so any change you make to it, will be reflected immediately in the app when started in development mode.\n\n\nIf you make changes to the config, rebuild the app and deploy the new image\n\n\ndocker-compose build\ndocker-compose up -d\n\n\n\n\nUsing Ubuntu 16.04 LTS\n\n\nYou can also install Fablabs.io on a clean Ubuntu 16.04 LTS system.\n\n\nDependencies\n\n\nStart installing all dependencies:\n\n\nsudo apt-get update -qq\n\nsudo apt-get install -y \\\n  build-essential \\\n  libpq-dev \\\n  libqt4-dev \\\n  libqtwebkit-dev \\\n  postgresql-client \\\n  nodejs \\\n  imagemagick \\\n  npm \\\n  git\n\nsudo apt-get install -y \\\n  ruby ruby-dev \\\n  memcached \\\n  postgresql \\\n  redis-server\n\nsudo apt-get install -y \\\n  qt5-default libqt5webkit5-dev \\\n  gstreamer1.0-plugins-base gstreamer1.0-tools \\\n  gstreamer1.0-x xvfb\n\n\n\n\n\n\n\nSetup postgres and access control\n\n\nEdit pg_hba.conf and change the local connections from md5 to trust\n\n\nRestart postgresql\n\n\nsudo /etc/init.d/postgresql restart\n\n\n\n\nClone the repository and install gems\n\n\ngit clone https://github.com/fablabbcn/fablabs.io.git\ncd fablabs.io\n\nsudo gem install bundler\n\nexport NOKOGIRI_USE_SYSTEM_LIBRARIES=1\n\nbundle config git.allow_insecure true\n\nbundle update kgio raindrops\n\nbundle install\n\n\n\n\n\n\n\nIf this command complains\nchange Gemfile ruby version to 2.3.1 or the one indicated\n\n\n\n\nsudo npm install -g bower\nsudo ln -sf `which nodejs` /usr/bin/node\n\nbower install\n\n\n\n\nCreate and setup databases\n\n\nbundle exec rake db:setup\nbundle exec rake db:migrate RAILS_ENV=development\nbundle exec rake db:seed RAILS_ENV=development\n\n\n\n\nSetup host aliases\n\n\nEdit the  \n/etc/hosts\n file and append the following lines, defining aliases for localhost. This way you will be able to access the web frontend and the main web interface.\n\n\n127.0.0.1  www.fablabs.local\n127.0.0.1  api.fablabs.local\n\n\n\n\nReady to start\n\n\nCheck everything is working by running the test suite.\n\n\nbundle exec rake\n\n\nIf tests fail, check you followed all the instructions or open an issue.\n\n\nFinally you can start the dev server:\n\n\nbundle exec rails s\n\n\nBrowse to \nhttp://www.fablabs.local:3000\n\n\nThe API is available at \nhttp://api.fablabs.local:3000",
            "title": "Home"
        },
        {
            "location": "/#fablabsio-developer-guide",
            "text": "",
            "title": "Fablabs.io Developer Guide"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting started"
        },
        {
            "location": "/#registering-your-application",
            "text": "In order to be able to use the Fablabs.io API you must first register your application in the [Fablabs.io Developer Console].  Once logged-in on Fablabs.io, you can access the Console, by clicking your username on the upper right of the screen, and selecting  Developer Console  from the dropdown.",
            "title": "Registering your application"
        },
        {
            "location": "/#oauth-authentication",
            "text": "The API uses  OAuth2  for authentication and authorization.  The typical workflow is the following:    You register an Application in your fablabs.io account, the system will create for you an Application Identifier and a shared Secret.    Your application redirects the user to obtain an Authorization Code from the API, passing the Application Identifier, a callback URL, and optionally an unique identifier which represents the user in your app. The shared secret is used for signing the request, so the API knows that it's really your app.    Once authenticated, the user is redirected to the callback URL specified before, passing a  code  parameter containing the Authorization Code.    Using the Authorization Code your app can request an Access Token from the API, which allows to call it on behalf of the logged in user    Finally you specify the Access Token in your API Requests via the query  access_token  param or the  Authorization  HTTP Header, using the  Bearer <token>  syntax         +----------+\n     | resource |\n     |   owner  |\n     |          |\n     +----------+\n          ^\n          |\n         (B)\n     +----|-----+          Client Identifier      +---------------+\n     |         -+----(A)-- & Redirection URI ---->|               |\n     |  User-   |                                 | Authorization |\n     |  Agent  -+----(B)-- User authenticates --->|     Server    |\n     |          |                                 |               |\n     |         -+----(C)-- Authorization Code ---<|               |\n     +-|----|---+                                 +---------------+\n       |    |                                         ^      v\n      (A)  (C)                                        |      |\n       |    |                                         |      |\n       ^    v                                         |      |\n     +---------+                                      |      |\n     |         |>---(D)-- Authorization Code ---------'      |\n     |  Client |          & Redirection URI                  |\n     |         |                                             |\n     |         |<---(E)----- Access Token -------------------'\n     +---------+       (w/ Optional Refresh Token)\n\n\n     OAuth Authorization Code Flow (source draft-ietf-oauth-v2-22)  There are a few client libraries for most programming languages that simplify the OAuth process, please see\nthe  OAuth client and server implementations  list.",
            "title": "OAuth Authentication"
        },
        {
            "location": "/#api-reference",
            "text": "Check the  API reference , based on swagger definition, to try out the API\nfrom your browser.   The documentation uses the  JSON API standard , which defines a number of conventions\nconcerning status codes, response format, pagination and so on. Many software libraries allow to interact with\nthe JSON-API compliant APIs  in a seamless way. The following page contains a  list of all JSON-API clients .",
            "title": "API Reference"
        },
        {
            "location": "/#contributing",
            "text": "The Fablabs.io platform is open for contributions from the community.  You can contribute in several ways:    Opening issues about bugs and feature requests    Contributing fixes for issues and new features, by submitting pull requests    Extending and enhancing this documentation",
            "title": "Contributing"
        },
        {
            "location": "/#issue-tracker",
            "text": "The Fablabs.io issue tracker is the right place to flag issues and to propose new features.   When reporting a bug make sure you follow these basic guidelines, including the following information:   Title: Using a clear title for the issue makes it easier to find it  Environment: your OS, browser version and any other information that might be useful  Steps to reproduce  Expected Result  Actual Result  Visual Proof (screenshots, videos, text)",
            "title": "Issue tracker"
        },
        {
            "location": "/#pull-requests",
            "text": "Pull requests are welcome, all the pull requests are tested using  Travis-CI .  To send a pull request, you need to Fork the project, add some changes and use the Github interface to start the process:   On GitHub, navigate to the main page of the  (forked) repository.  In the \"Branch\" menu, choose the branch that contains your commits.  To the right of the Branch menu, click New pull request.   Always make sure the test suite is passing locally before sending a pull request.",
            "title": "Pull requests"
        },
        {
            "location": "/#improve-the-documentation",
            "text": "This documentation is open-source as well, so you can send pull requests for enhancing it or fixing any error.  Similar to the above, fork the  Github docs.fablabs.io  repository and follow the instructions in the  README  on how to build the documentation.",
            "title": "Improve the documentation"
        },
        {
            "location": "/#setting-up-the-development-environment",
            "text": "In order to be able to edit the code and contribute, you first need to setup your development environment replicating the production version of Fablabs.io.  This will allow to run tests and develop new features with ease.  The development environment is now fully ported to docker, which is the recommended way, taking only few minutes.",
            "title": "Setting up the development environment"
        },
        {
            "location": "/#using-docker-docker-composer",
            "text": "You will need the latest version of  Docker  and  Docker compose  installed on your machine. Docker runs on most modern OSes.   Step one   Clone the official repository  git clone https://github.com/fablabbcn/fablabs.io.git  Start the project:    docker-compose up web app  Create database (only the first time):     docker-compose exec app rake db:setup\n docker-compose exec app /usr/local/bin/bower install  Add the following lines to your  /etc/hosts :  127.0.0.1   www.fablabs.local\n127.0.0.1   api.fablabs.local  You can also add some seed data, instead of starting with an empty db:  docker-compose exec app rake db:seed  Run tests with  docker-compose exec app rake spec  The code is mounted from the local filesystem, so any change you make to it, will be reflected immediately in the app when started in development mode.  If you make changes to the config, rebuild the app and deploy the new image  docker-compose build\ndocker-compose up -d",
            "title": "Using Docker &amp; Docker-composer"
        },
        {
            "location": "/#using-ubuntu-1604-lts",
            "text": "You can also install Fablabs.io on a clean Ubuntu 16.04 LTS system.",
            "title": "Using Ubuntu 16.04 LTS"
        },
        {
            "location": "/#dependencies",
            "text": "Start installing all dependencies:  sudo apt-get update -qq\n\nsudo apt-get install -y \\\n  build-essential \\\n  libpq-dev \\\n  libqt4-dev \\\n  libqtwebkit-dev \\\n  postgresql-client \\\n  nodejs \\\n  imagemagick \\\n  npm \\\n  git\n\nsudo apt-get install -y \\\n  ruby ruby-dev \\\n  memcached \\\n  postgresql \\\n  redis-server\n\nsudo apt-get install -y \\\n  qt5-default libqt5webkit5-dev \\\n  gstreamer1.0-plugins-base gstreamer1.0-tools \\\n  gstreamer1.0-x xvfb",
            "title": "Dependencies"
        },
        {
            "location": "/#setup-postgres-and-access-control",
            "text": "Edit pg_hba.conf and change the local connections from md5 to trust  Restart postgresql  sudo /etc/init.d/postgresql restart",
            "title": "Setup postgres and access control"
        },
        {
            "location": "/#clone-the-repository-and-install-gems",
            "text": "git clone https://github.com/fablabbcn/fablabs.io.git\ncd fablabs.io\n\nsudo gem install bundler\n\nexport NOKOGIRI_USE_SYSTEM_LIBRARIES=1\n\nbundle config git.allow_insecure true\n\nbundle update kgio raindrops\n\nbundle install   If this command complains\nchange Gemfile ruby version to 2.3.1 or the one indicated   sudo npm install -g bower\nsudo ln -sf `which nodejs` /usr/bin/node\n\nbower install",
            "title": "Clone the repository and install gems"
        },
        {
            "location": "/#create-and-setup-databases",
            "text": "bundle exec rake db:setup\nbundle exec rake db:migrate RAILS_ENV=development\nbundle exec rake db:seed RAILS_ENV=development",
            "title": "Create and setup databases"
        },
        {
            "location": "/#setup-host-aliases",
            "text": "Edit the   /etc/hosts  file and append the following lines, defining aliases for localhost. This way you will be able to access the web frontend and the main web interface.  127.0.0.1  www.fablabs.local\n127.0.0.1  api.fablabs.local",
            "title": "Setup host aliases"
        },
        {
            "location": "/#ready-to-start",
            "text": "Check everything is working by running the test suite.  bundle exec rake  If tests fail, check you followed all the instructions or open an issue.  Finally you can start the dev server:  bundle exec rails s  Browse to  http://www.fablabs.local:3000  The API is available at  http://api.fablabs.local:3000",
            "title": "Ready to start"
        },
        {
            "location": "/examples/",
            "text": "Examples\n\n\nWe provide a number of examples for implmenting the Fablabs.io auth and integrating the API into your website.\n\n\nJavascript\n\n\n\n\nVue.js\n with zeit micro local auth server\n\n\nExpress\n\n\n\n\nPython\n\n\n\n\nFlask\n\n\n\n\nCheckout the full examples repository on Github:\n\n\nhttps://github.com/fablabbcn/examples.fablabs.io\n\n\nTrying out the examples\n\n\nIn order to use any of these examples you need an Application ID and Secret as described in the \nDeveloper Guide\n.\n\n\nAll examples run on port 3001, so make sure to specify \nhttp://localhost:3001/auth/callback\n as the redirect URL.\n\n\nOnce you have the credentials, you should set the following environment variables before running the examples\n\n\nexport FABLABS_IO_API_KEY='your key'\nexport FABLABS_IO_API_SECRET='your secret'\n\n\n\n\nIf you use a \nlocal server\n:\n\n\nexport FABLABS_IO_API_HOST='http://api.fablabs.local:3000'\n\n\n\n\nIf you use the \nstaging server\n\n\nexport FABLABS_IO_API_HOST='http://api.staging.fablabs.io:3000'\n\n\n\n\nIf you use the \nproduction server\n\n\nexport FABLABS_IO_API_HOST='https://api.fablabs.io'",
            "title": "Examples"
        },
        {
            "location": "/examples/#examples",
            "text": "We provide a number of examples for implmenting the Fablabs.io auth and integrating the API into your website.",
            "title": "Examples"
        },
        {
            "location": "/examples/#javascript",
            "text": "Vue.js  with zeit micro local auth server  Express",
            "title": "Javascript"
        },
        {
            "location": "/examples/#python",
            "text": "Flask   Checkout the full examples repository on Github:  https://github.com/fablabbcn/examples.fablabs.io",
            "title": "Python"
        },
        {
            "location": "/examples/#trying-out-the-examples",
            "text": "In order to use any of these examples you need an Application ID and Secret as described in the  Developer Guide .  All examples run on port 3001, so make sure to specify  http://localhost:3001/auth/callback  as the redirect URL.  Once you have the credentials, you should set the following environment variables before running the examples  export FABLABS_IO_API_KEY='your key'\nexport FABLABS_IO_API_SECRET='your secret'  If you use a  local server :  export FABLABS_IO_API_HOST='http://api.fablabs.local:3000'  If you use the  staging server  export FABLABS_IO_API_HOST='http://api.staging.fablabs.io:3000'  If you use the  production server  export FABLABS_IO_API_HOST='https://api.fablabs.io'",
            "title": "Trying out the examples"
        },
        {
            "location": "/libraries/",
            "text": "Libraries\n\n\nIn order to simplify the development of third-party apps talking to Fablabs.io we provide client libraries for popular programming languages.\n\n\nJavascript\n\n\n\n\nFablabs.js\n: an ES6 implementation for the API \n    \nGithub\n | \nDocumentation",
            "title": "Libraries"
        },
        {
            "location": "/libraries/#libraries",
            "text": "In order to simplify the development of third-party apps talking to Fablabs.io we provide client libraries for popular programming languages.",
            "title": "Libraries"
        },
        {
            "location": "/libraries/#javascript",
            "text": "Fablabs.js : an ES6 implementation for the API \n     Github  |  Documentation",
            "title": "Javascript"
        }
    ]
}